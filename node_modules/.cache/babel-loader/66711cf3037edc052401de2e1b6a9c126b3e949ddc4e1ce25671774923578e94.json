{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gsubi\\\\Documents\\\\simplediary\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setdata] = useState([]); //받는 데이터 자체가 배열\n\n  const dataId = useRef(0);\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setdata([newItem, ...data]);\n  };\n  const onDelete = targetId => {\n    const newDiaryList = data.filter(it => it.id !== targetId //targetId가 아닌 배열을 새로 저장\n    );\n    setdata(newDiaryList);\n  };\n  const onEdit = (targetId, newContent) => {\n    setdata(data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n  };\n\n  //map으로 순회하면서 해당 배열이 타겟 아이디랑 같을 경우 컨텐츠 제외 모두 복사 후 컨텐츠만 변경\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEdit: onEdit,\n      diaryList: data,\n      onDelete: onDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9tUpPcmISjySwdROJRGCFbq+lxU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","DiaryEditor","DiaryList","jsxDEV","_jsxDEV","App","_s","data","setdata","dataId","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","onDelete","targetId","newDiaryList","filter","it","onEdit","newContent","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryList","_c","$RefreshReg$"],"sources":["C:/Users/gsubi/Documents/simplediary/src/App.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport './App.css';\nimport DiaryEditor from './DiaryEditor';\nimport DiaryList from './DiaryList';\n\n\n\nfunction App() {\n  const [data, setdata] = useState([]); //받는 데이터 자체가 배열\n \n  const dataId = useRef(0); \n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setdata([newItem, ...data]);\n  }\n  \n  const onDelete = (targetId) => {\n    const newDiaryList = data.filter(\n      (it) => it.id !== targetId //targetId가 아닌 배열을 새로 저장\n    );\n    setdata(newDiaryList);\n  }\n\n  const onEdit = (targetId, newContent) => {\n    setdata(\n      data.map((it) =>\n        it.id === targetId ? { ...it, content: newContent } : it\n      )\n    );\n  };\n\n  \n //map으로 순회하면서 해당 배열이 타겟 아이디랑 같을 경우 컨텐츠 제외 모두 복사 후 컨텐츠만 변경\n\n  return (\n    <div className=\"App\">\n     <DiaryEditor onCreate={onCreate} />\n     <DiaryList onEdit={onEdit} diaryList={data} onDelete={onDelete}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIpC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtC,MAAMS,MAAM,GAAGV,MAAM,CAAC,CAAC,CAAC;EAExB,MAAMW,QAAQ,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7C,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACzC,MAAMC,OAAO,GAAG;MACdN,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,YAAY;MACZI,EAAE,EAAET,MAAM,CAACU;IACb,CAAC;IACDV,MAAM,CAACU,OAAO,IAAI,CAAC;IACnBX,OAAO,CAAC,CAACS,OAAO,EAAE,GAAGV,IAAI,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMa,QAAQ,GAAIC,QAAQ,IAAK;IAC7B,MAAMC,YAAY,GAAGf,IAAI,CAACgB,MAAM,CAC7BC,EAAE,IAAKA,EAAE,CAACN,EAAE,KAAKG,QAAQ,CAAC;IAC7B,CAAC;IACDb,OAAO,CAACc,YAAY,CAAC;EACvB,CAAC;EAED,MAAMG,MAAM,GAAGA,CAACJ,QAAQ,EAAEK,UAAU,KAAK;IACvClB,OAAO,CACLD,IAAI,CAACoB,GAAG,CAAEH,EAAE,IACVA,EAAE,CAACN,EAAE,KAAKG,QAAQ,GAAG;MAAE,GAAGG,EAAE;MAAEZ,OAAO,EAAEc;IAAW,CAAC,GAAGF,EACxD,CACF,CAAC;EACH,CAAC;;EAGF;;EAEC,oBACEpB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACnBzB,OAAA,CAACH,WAAW;MAACS,QAAQ,EAAEA;IAAS;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnC7B,OAAA,CAACF,SAAS;MAACuB,MAAM,EAAEA,MAAO;MAACS,SAAS,EAAE3B,IAAK;MAACa,QAAQ,EAAEA;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV;AAAC3B,EAAA,CA1CQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}